name: Build Pd Externals
on: [push, pull_request]
jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: install Ubuntu packages
        run: |
          PACKAGES=(
            libfftw3-dev
            libsndfile1-dev
            libmysofa-dev
            puredata-dev
          )
          sudo apt-get install --no-install-recommends ${PACKAGES[@]}
      - name: checkout ssr
        uses: actions/checkout@v2
        with:
          submodules: true
          path: ssr
      - name: build externals
        working-directory: ssr/flext
        run: |
          make install DESTDIR=build PDLIBDIR=
      - name: Fix pd_linux dependencies
        working-directory: ssr/flext
        run: |
          sh pd-lib-builder-iem-ci/pd-lib-builder/localdeps.linux.sh build/ssr_*.pd_linux
      - name: upload Linux externals
        uses: actions/upload-artifact@v2
        with:
          name: linux-externals
          path: ssr/flext/build/*

  macos:
    runs-on: macos-latest
    env:
      cflags: -mmacosx-version-min=10.9
    steps:
      - name: install macOS packages
        run: |
          brew install fftw libsndfile cunit pkg-config
          brew install --cask pd
      - name: checkout ssr
        uses: actions/checkout@v2
        with:
          submodules: true
          path: ssr
      - name: checkout libmysofa
        uses: actions/checkout@v2
        with:
          repository: hoene/libmysofa
          path: libmysofa
      - name: build libmysofa
        working-directory: libmysofa/build
        run: |
          cmake ..
          make
          sudo make install
      - name: build externals
        working-directory: ssr/flext
        run: |
          make install DESTDIR=build PDLIBDIR=
      - name: Fix pd_darwin dependencies
        working-directory: ssr/flext
        run: |
          sh pd-lib-builder-iem-ci/pd-lib-builder/localdeps.macos.sh build/ssr_*.pd_darwin
      - name: upload macOS externals
        uses: actions/upload-artifact@v2
        with:
          name: macos-externals
          path: ssr/flext/build/*

  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          release: false
          install: >-
            mingw-w64-x86_64-fftw
            mingw-w64-x86_64-libsndfile
            mingw-w64-x86_64-libmysofa
            mingw-w64-x86_64-ntldd-git
      - name: Install Pd
        run: |
          wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-0.51-3.msw.zip
          rm -rf "${PROGRAMFILES}/pd" && mkdir -p "${PROGRAMFILES}/pd"
          unzip -q Pd.zip -d "${PROGRAMFILES}/pd"
          mv -v "${PROGRAMFILES}/pd"/*/* "${PROGRAMFILES}/pd"
          rm -f Pd.zip
          export PD="${PROGRAMFILES}/pd/bin/pd.com"
      - name: Checkout libxml2 source code
        shell: bash
        run: |
          git clone https://gitlab.gnome.org/GNOME/libxml2.git
          cd libxml2
          git checkout v2.9.10
      - name: Build libxml2
        working-directory: libxml2
        run: |
          ./autogen.sh \
            --without-c14n \
            --without-catalog \
            --without-debug \
            --without-docbook \
            --without-fexceptions \
            --without-ftp \
            --without-history \
            --without-html \
            --without-http \
            --without-iconv \
            --without-icu \
            --without-iso8859x \
            --without-legacy \
            --with-minimum \
            --with-output \
            --without-pattern \
            --without-push \
            --without-python \
            --without-reader \
            --without-readline \
            --without-regexps \
            --with-sax1 \
            --with-schemas \
            --without-schematron \
            --without-threads \
            --without-tree \
            --without-valid \
            --without-writer \
            --without-xinclude \
            --with-xpath \
            --without-xptr \
            --without-modules \
            --without-zlib \
            --without-lzma \
            --
          make
          make install
      - name: checkout ssr
        uses: actions/checkout@v2
        with:
          submodules: true
          path: ssr
      - name: build externals
        working-directory: ssr/flext
        run: |
          make install DESTDIR=build PDLIBDIR=
      - name: Fix dll dependencies
        working-directory: ssr/flext
        run: |
          sh pd-lib-builder-iem-ci/pd-lib-builder/localdeps.win.sh build/ssr_*.dll
      - name: upload Windows externals
        uses: actions/upload-artifact@v2
        with:
          name: windows-externals
          path: ssr/flext/build/*

  deken-package:
    runs-on: ubuntu-latest
    needs: [linux, macos, windows]
    steps:
      - name: Clone Git repository
        uses: actions/checkout@v2
      - name: Retrieve Linux externals
        uses: actions/download-artifact@v2
        with:
          name: linux-externals
          path: ssr
      - name: Retrieve macOS external
        uses: actions/download-artifact@v2
        with:
          name: macos-externals
          path: ssr
      - name: Retrieve Windows external
        uses: actions/download-artifact@v2
        with:
          name: windows-externals
          path: ssr
      - name: Install deken
        run: |
          sudo apt-get install --no-install-recommends deken
          # work-arounds from https://github.com/pure-data/deken/issues/247:
          mkdir ~/.deken
          python3 -m pip install hy==0.19
      - name: Run deken
        run: |
          deken package -v $(git describe --tags --always) --objects flext/objects.txt ssr
      - name: Upload deken package
        uses: actions/upload-artifact@v2
        with:
          name: Deken package
          path: "*.dek*"
